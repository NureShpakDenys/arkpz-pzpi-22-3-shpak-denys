basePath: /
definitions:
  handlers.AddUserToCompanyRequest:
    properties:
      role:
        allOf:
        - $ref: '#/definitions/handlers.Role'
        example: user | admin | manager
      userID:
        type: integer
    type: object
  handlers.AuthCredentials:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    type: object
  handlers.BackupDatabaseRequest:
    properties:
      backup_path:
        type: string
    type: object
  handlers.CompanyRequest:
    properties:
      address:
        type: string
      name:
        type: string
    type: object
  handlers.CreateDeliveryRequest:
    properties:
      company_id:
        type: integer
      date:
        example: "2023-09-01"
        type: string
    type: object
  handlers.CreateProductRequest:
    properties:
      deliveryID:
        type: integer
      name:
        type: string
      product_type:
        example: Fruits | Vegetables | Frozen Foods | Dairy Products | Meat
        type: string
      weight:
        type: number
    type: object
  handlers.CreateRouteRequest:
    properties:
      company_id:
        type: integer
      name:
        example: Route 1
        type: string
    type: object
  handlers.CreateSensorDataRequest:
    properties:
      date:
        example: "2021-09-01T12:00:00Z"
        type: string
      humidity:
        example: 50
        type: number
      temperature:
        example: 25.5
        type: number
      waypoint_id:
        type: integer
    type: object
  handlers.CreateWaypointRequest:
    properties:
      device_serial:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      route_id:
        type: integer
    type: object
  handlers.RemoveUserFromCompanyRequest:
    properties:
      userID:
        type: integer
    type: object
  handlers.Role:
    enum:
    - user
    - admin
    - manager
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
    - RoleManager
  handlers.UpdateDeliveryRequest:
    properties:
      date:
        example: "2024-08-01"
        type: string
      status:
        example: completed
        type: string
    type: object
  handlers.UpdateProductRequest:
    properties:
      name:
        type: string
      product_type:
        type: string
      weight:
        type: number
    type: object
  handlers.UpdateRouteRequest:
    properties:
      name:
        example: Route 1
        type: string
    type: object
  handlers.UpdateUserInCompanyRequest:
    properties:
      role:
        example: user | admin | manager
        type: string
      userID:
        type: integer
    type: object
  handlers.UpdateUserRequest:
    properties:
      name:
        type: string
    type: object
  handlers.UpdateWaypointRequest:
    properties:
      device_serial:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  termsOfService: http://swagger.io/terms/
  title: API Specification
  version: "1.0"
paths:
  /admin/backup:
    post:
      consumes:
      - application/json
      description: Backup the database
      parameters:
      - description: Backup path
        in: body
        name: BackupDatabaseRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.BackupDatabaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Backup created
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Backup the database
      tags:
      - admin
  /admin/restore:
    post:
      consumes:
      - application/json
      description: Restore the database
      parameters:
      - description: Backup path
        in: body
        name: BackupDatabaseRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.BackupDatabaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Database restored
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Restore the database
      tags:
      - admin
  /analytics/{delivery_id}/optimal-back-route:
    get:
      description: Retrieves the optimal back route for the given route ID
      parameters:
      - description: delivery_id
        in: path
        name: delivery_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get optimal back route
      tags:
      - analytics
  /analytics/{delivery_id}/optimal-route:
    get:
      description: Retrieves the optimal route for the given route ID
      parameters:
      - description: delivery_id
        in: path
        name: delivery_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get optimal route
      tags:
      - analytics
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.AuthCredentials'
      produces:
      - application/json
      responses: {}
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out a user by invalidating their token
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided details
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.AuthCredentials'
      produces:
      - application/json
      responses: {}
      summary: Register a new user
      tags:
      - auth
  /company:
    post:
      consumes:
      - application/json
      description: Registers a new company with the provided details
      parameters:
      - description: Company details
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/handlers.CompanyRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Register a new company
      tags:
      - company
  /company/{company_id}:
    delete:
      description: Deletes a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a company
      tags:
      - company
    get:
      description: Retrieves the details of a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get company details
      tags:
      - company
    put:
      consumes:
      - application/json
      description: Updates the details of an existing company
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: integer
      - description: Updated company details
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/handlers.CompanyRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update company details
      tags:
      - company
  /company/{company_id}/add-user:
    post:
      consumes:
      - application/json
      description: Adds a user to a company if the request is made by the company
        creator
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: integer
      - description: User ID to add
        in: body
        name: userID
        required: true
        schema:
          $ref: '#/definitions/handlers.AddUserToCompanyRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Add a user to a company
      tags:
      - company
  /company/{company_id}/remove-user:
    delete:
      consumes:
      - application/json
      description: Removes a user from a company if the request is made by the company
        creator
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: integer
      - description: User ID to remove
        in: body
        name: userID
        required: true
        schema:
          $ref: '#/definitions/handlers.RemoveUserFromCompanyRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Remove a user from a company
      tags:
      - company
  /company/{company_id}/update-user:
    put:
      consumes:
      - application/json
      description: Updates a user in a company if the request is made by the company
        creator
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: integer
      - description: User ID to update
        in: body
        name: userID
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserInCompanyRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update a user in a company
      tags:
      - company
  /delivery/:
    post:
      consumes:
      - application/json
      description: Create a delivery
      parameters:
      - description: CreateDeliveryRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateDeliveryRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a delivery
      tags:
      - delivery
  /delivery/{delivery_id}:
    delete:
      consumes:
      - application/json
      description: Delete a delivery
      parameters:
      - description: Delivery ID
        in: path
        name: delivery_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a delivery
      tags:
      - delivery
    get:
      consumes:
      - application/json
      description: Get a delivery
      parameters:
      - description: Delivery ID
        in: path
        name: delivery_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get a delivery
      tags:
      - delivery
    put:
      consumes:
      - application/json
      description: Update a delivery
      parameters:
      - description: Delivery ID
        in: path
        name: delivery_id
        required: true
        type: integer
      - description: UpdateDeliveryRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateDeliveryRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update a delivery
      tags:
      - delivery
  /products:
    post:
      consumes:
      - application/json
      description: Create a product
      parameters:
      - description: CreateProductRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateProductRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a product
      tags:
      - product
  /products/{product_id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - product
    get:
      consumes:
      - application/json
      description: Get a product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get a product
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: UpdateProductRequest
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProductRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - product
  /routes:
    post:
      consumes:
      - application/json
      description: Creates a new route with the provided details
      parameters:
      - description: Route details
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRouteRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Create a new route
      tags:
      - route
  /routes/{route_id}:
    delete:
      description: Deletes a route with the given ID
      parameters:
      - description: Route ID
        in: path
        name: route_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a route
      tags:
      - route
    get:
      description: Retrieves a route with the given ID
      parameters:
      - description: Route ID
        in: path
        name: route_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get a route
      tags:
      - route
    put:
      consumes:
      - application/json
      description: Updates an existing route with the given ID
      parameters:
      - description: Route ID
        in: path
        name: route_id
        required: true
        type: integer
      - description: Updated route details
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateRouteRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update an existing route
      tags:
      - route
  /routes/{route_id}/weather-alert:
    get:
      description: Retrieves the weather alert for the given route ID
      parameters:
      - description: route_id
        in: path
        name: route_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get weather alert
      tags:
      - analytics
  /sensor-data:
    post:
      consumes:
      - application/json
      description: Adds new sensor data to the specified SensorData
      parameters:
      - description: Sensor data details
        in: body
        name: sensor_data
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateSensorDataRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Add sensor data to a SensorData
      tags:
      - sensor
  /sensor-data/{sensor_data_id}:
    get:
      description: Retrieves sensor data with the given ID
      parameters:
      - description: Sensor Data ID
        in: path
        name: sensor_data_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get sensor data by ID
      tags:
      - sensor
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get a user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get a user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user by ID
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - user
  /users:
    get:
      consumes:
      - application/json
      operationId: get-users
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get users
      tags:
      - user
  /waypoints:
    post:
      consumes:
      - application/json
      description: Adds a new waypoint to the specified route
      parameters:
      - description: Waypoint details
        in: body
        name: waypoint
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateWaypointRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Add a waypoint to a route
      tags:
      - waypoint
  /waypoints/{waypoint_id}:
    delete:
      description: Deletes a waypoint
      parameters:
      - description: Waypoint ID
        in: path
        name: waypoint_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete waypoint
      tags:
      - waypoint
    get:
      description: Retrieves the details of a waypoint
      parameters:
      - description: Waypoint ID
        in: path
        name: waypoint_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get waypoint details
      tags:
      - waypoint
    put:
      consumes:
      - application/json
      description: Updates the details of a waypoint
      parameters:
      - description: Waypoint ID
        in: path
        name: waypoint_id
        required: true
        type: integer
      - description: Waypoint details
        in: body
        name: waypoint
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateWaypointRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update waypoint details
      tags:
      - waypoint
securityDefinitions:
  BearerAuth:
    description: 'Provide the Bearer token in the format: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
